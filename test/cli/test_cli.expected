err_default_several_file
========================
args: sample/a.ml sample/b.ml
ocamlformat: Must specify exactly one input file without --inplace or --check
[1]

err_inplace_and_check
=====================
args: --inplace --check sample/a.ml
ocamlformat: Cannot specify --inplace with --check
[1]

err_inplace_and_output
======================
args: --inplace --output o.ml sample/a.ml
ocamlformat: Cannot specify --output with --inplace
[1]

err_no_arg
==========
args: 
ocamlformat: Must specify at least one input file, or `-` for stdin
[1]

err_output_and_check
====================
args: --output x.ml --check sample/a.ml
ocamlformat: Cannot specify --output with --check
[1]

err_output_several_files
========================
args: --output x.ml sample/a.ml sample/b.ml
ocamlformat: Must specify exactly one input file without --inplace or --check
[1]

err_stdin_and_file
==================
args: sample/a.ml -
ocamlformat: Cannot specify stdin together with other inputs
[1]

err_stdin_and_inplace
=====================
args: --inplace -
ocamlformat: Must specify at least one of --impl, --intf or --use-file when reading from stdin
[1]

err_stdin_no_kind
=================
args: -
ocamlformat: Must specify at least one of --impl, --intf or --use-file when reading from stdin
[1]

stdin_and_impl
==============
args: --impl -
let () = print_endline A.x
[0]

stdin_and_intf
==============
args: --intf -
val x : string

module X : S
(** Make sure this file cannot be parsed as an impl file *)
[0]

stdin_and_name
==============
args: --name a.ml -
ocamlformat: Must specify at least one of --impl, --intf or --use-file when reading from stdin
[1]

name_unknown_ext
================
args: --name b.cpp sample/b.ml
let () = print_endline A.x
[0]

err_stdin_name_unknown_ext
==========================
args: --name b.cpp -
ocamlformat: Must specify at least one of --impl, --intf or --use-file when reading from stdin
[1]

err_several_files_and_kind
==========================
args: --impl --check sample/a.mli sample/b.ml
ocamlformat: ignoring "sample/a.mli" (syntax error)
File "sample/a.mli", line 5, characters 0-0:
Error: Syntax error
[1]

err_several_files_and_name
==========================
args: --name foo.ml --check sample/a.mli sample/b.ml
[1]

err_several_files_and_kind_inplace
==================================
args: --impl --check sample/a.mli sample/b.ml
ocamlformat: ignoring "sample/a.mli" (syntax error)
File "sample/a.mli", line 5, characters 0-0:
Error: Syntax error
[1]

err_several_files_and_name_inplace
==================================
args: --name foo.ml --check sample/a.mli sample/b.ml
[1]

fmterr_file_and_name
====================
args: --name foo.ml sample/syntax_error.ml
ocamlformat: ignoring "sample/syntax_error.ml" (syntax error)
File "sample/syntax_error.ml", line 2, characters 0-0:
Error: Syntax error
[1]

fmterr_stdin_and_name
=====================
args: --name foo.ml -
ocamlformat: Must specify at least one of --impl, --intf or --use-file when reading from stdin
[1]

fmterr_file_bad_kind
====================
args: --impl sample/a.mli
ocamlformat: ignoring "sample/a.mli" (syntax error)
File "sample/a.mli", line 5, characters 0-0:
Error: Syntax error
[1]

fmterr_stdin_bad_kind
=====================
args: --impl -
ocamlformat: ignoring "<standard input>" (syntax error)
File "<standard input>", line 5, characters 0-0:
Error: Syntax error
[1]

fmterr_file_and_name_bad_kind
=============================
args: --name foo.ml sample/a.mli
val x : string

module X : S
(** Make sure this file cannot be parsed as an impl file *)
[0]

fmterr_stdin_and_name_bad_kind
==============================
args: --name foo.ml -
ocamlformat: Must specify at least one of --impl, --intf or --use-file when reading from stdin
[1]

